; Loggers are the main entry point for logging. They are responsible for capturing log messages and passing them to the appropriate handlers. Each logger has a name and a logging level
; loggers used in the application
[loggers]
keys = root, spark_session, validate, ingest, Data_processing

; Handlers determine where the log messages go. They can send log messages to various destinations, such as the console, files, or even remote servers. Common handlers include StreamHandler (for console output) and FileHandler (for writing to files).
; handlers that will process the log messages
[handlers]
; Console Handler also known as StreamHandler sends log messages to the console (standard output). It is useful for real-time logging during development and debugging.
; File Handler writes log messages to a file. It is useful for persistent logging, allowing you to review log messages later.
keys = consoleHandler, fileHandler

; Formatters specify the layout of the log messages. They define how the log messages should be formatted, including the timestamp, logger name, log level, and the actual log message.
; formatters that specify the layout of the log messages
[formatters]
keys = sampleFormatter

; The root logger is the default logger provided by the logging module. It is the ancestor of all other loggers and is configured by default to handle log messages if no other logger is specified.
; Configuration for the root logger
[logger_root]
; Level defines the severity of the log messages. Common levels include DEBUG, INFO, WARNING, ERROR, and CRITICAL. Each level has a numeric value, and only messages with a level equal to or higher than the logger’s level are processed.
; Log all messages from DEBUG level and above
level = DEBUG
; Use both console and file handlers
handlers = consoleHandler, fileHandler

; Configuration for the spark_session logger
[logger_spark_session]
; Log messages from INFO level and above
level = INFO
handlers = fileHandler
; Qualname (qualified name) is the name of the logger. It is used to identify the logger and can be hierarchical, allowing for structured logging.
; Name of the logger
qualname = spark_session
; Propagate is a boolean attribute that determines whether a log message should be passed to the logger’s parent. If set to 0 (False), the message will not propagate to the parent logger.
; Do not pass messages to the root logger
propagate = 0

; Configuration for the validate logger
[logger_validate]
; Log messages from WARN level and above
level = INFO 
; Use the file handler
handlers = fileHandler
; Name of the logger
qualname = validate 
; Do not pass messages to the root logger
propagate = 0

; Configuration for the ingest logger
[logger_ingest]
; Log messages from INFO level and above
level = WARN
handlers = fileHandler
qualname = ingest
propagate = 0

[logger_Data_processing]
level = WARN
handlers = fileHandler
qualname = Data_processing
propagate = 0

; Configuration for the console handler
[handler_consoleHandler]
; Class specifies the handler class to be used. For example, StreamHandler for console output and FileHandler for file output.
; Handler class for console output
class = StreamHandler
; Log all messages from DEBUG level and above
level = DEBUG 
; Use the sampleFormatter for formatting
formatter = sampleFormatter 
; Args are the arguments passed to the handler class. For example, ('application.log',) specifies the filename for a FileHandler.
; Output log messages to the console
args = (sys.stdout,)

; Configuration for the file handler
[handler_fileHandler]
; Handler class for file output
class = FileHandler
; Log all messages from DEBUG level and above
level = DEBUG 
; Use the sampleFormatter for formatting
formatter = sampleFormatter 
; Output log messages to the file 'application.log'
args = ('application.log',) 

; To define the format for log messages
[formatter_sampleFormatter]
; Format defines the layout of the log messages. It includes placeholders for various log message attributes, such as %(asctime)s for the timestamp, %(name)s for the logger name, %(levelname)s for the log level, and %(message)s for the actual log message.
format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
; Layout of log messages
